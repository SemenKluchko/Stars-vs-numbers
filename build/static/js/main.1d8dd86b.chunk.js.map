{"version":3,"sources":["components/header/Header.jsx","components/user-form/UserForm.jsx","components/list-of-users/ListOfUsers.jsx","components/play-number/PlayNumber.jsx","components/stars-display/StarsDisplay.jsx","components/game/Game.jsx","components/star-match/StarMatch.jsx","components/app/App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","Button","variant","size","onClick","onClickStartGame","UserForm","useState","name","setName","position","setPosition","handleSubmit","useCallback","event","preventDefault","id","onUpdate","onSave","htmlFor","value","onChange","target","type","placeholder","ListOfUsers","class","secondsLeft","PlayNumber","style","backgroundColor","colors","status","number","StarsDisplay","Game","available","used","wrong","candidate","utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","setSecondsLeft","handleAddTime","updatesData","useEffect","timerId","setTimeout","clearTimeout","candidateAreWrong","gameStatus","changeGameVisibility","updatesGameVisibility","numberStatus","includes","onNumberClick","currentStatus","newCandidateNums","filter","cn","newAvailableNums","n","map","starId","StarMatch","gameId","setGameId","isGameVisible","isFormVisible","changeFormVisibility","isHeaderVisible","changeHeaderVisibility","isTableVisible","changeTableVisibility","list","changeList","handleStartGame","createNewUser","prevState","toString","substr","addTime","updatesId","updatesName","updatesPosition","updatesSecondsLeft","console","log","user","key","gameVisibility","startNewGame","Table","striped","bordered","hover","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d8dd86b.chunk.js","sourcesContent":["import Button from 'react-bootstrap/Button';\nimport './Header.css';\n\nexport default function Header(props) {\n    return (\n        <div className=\"help centered\">\n            <h1 className=\"greeting\">Stars vs Numbers</h1>\n            <p className=\"rules\">You'll need to pick 1 or more numbers that sum to the number of stars</p>\n            <Button \n                variant=\"success\" \n                size=\"lg\" \n                className=\"create-button\" \n                onClick={props.onClickStartGame}\n            >New Game</Button>\n        </div>\n    );\n  }\n","import Button from 'react-bootstrap/Button';\nimport { useState, useCallback } from 'react';\nimport './UserForm.css';\n\nexport default function UserForm(props) {\n    const [name, setName] = useState(props.name || '');\n    const [position, setPosition] = useState(props.position || 'visitor');\n\n    const handleSubmit = useCallback((event) => {\n        event.preventDefault();\n        if (props.id) {\n            props.onUpdate(props.id, name, position)\n        } else {\n            props.onSave(name, position)\n        }\n    }, [props, name, position]);\n\n    return (\n        <form className=\"user-item-form centered\">\n        <div className='form-item'>\n            <label className=\"form-label\" htmlFor=\"position\">Your are:</label>\n            <select \n                className=\"form-control\" \n                name=\"position\" \n                id=\"position\"\n                value={position}\n                onChange={(event) => setPosition(event.target.value)}>\n\n                <option value=\"student\">student</option>\n                <option value=\"mentor\">mentor</option>\n                <option value=\"visitor\">visitor</option>\n            </select>\n        </div>\n        <div className=\"form-item\">\n        <label className=\"form-label\" htmlFor=\"name\">Name:</label>\n        <input \n            className=\"form-control\" \n            type=\"text\" \n            name=\"name\" \n            placeholder=\"Type your name or nickname\"\n            id=\"name\"\n            value={name}\n            onChange={(event) => setName(event.target.value)}/>\n        </div>\n        <Button variant=\"success\"onClick={handleSubmit}>Lets go!</Button>\n    </form>\n    );\n  }\n","import './ListOfUsers.css';\n\nexport default function ListOfUsers(props) {\n    return (\n        \n            <tr class=\"table-row\">\n                <td>{props.name}</td>\n                <td>{props.position}</td>\n                <td>{props.secondsLeft}sec</td>\n            </tr>\n    );\n  }","import './PlayNumber.css';\n\nfunction PlayNumber(props) {\n\n    return(\n        <button \n        className=\"number\"\n        style={{ backgroundColor: props.colors[props.status]}}\n        onClick={() => props.onClick(props.number, props.status)}\n        \n        >{props.number}</button>\n    );\n}\n\nexport default PlayNumber;\n","import './StarsDisplay.css';\n\nfunction StarsDisplay() {\n\n    return(\n        <>\n            <div className=\"star\" />\n        </>\n    );\n}\n\nexport default StarsDisplay;","import Button from 'react-bootstrap/Button';\nimport { useState, useEffect, useCallback } from 'react';\nimport PlayNumber from '../play-number/PlayNumber';\nimport StarsDisplay from '../stars-display/StarsDisplay';\nimport './Game.css';\n\n\nfunction Game(props) {\n\n  const colors =  {\n    available: 'lightgray',\n    used: 'lightgreen',\n    wrong: 'lightcoral',\n    candidate: 'deepskyblue',\n  };\n  \n  // Math science\n  const utils = {\n    // Sum an array\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n  \n    // create an array of numbers between min and max (edges included)\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\n  \n    // pick a random number between min and max (edges included)\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n  \n    // Given an array of numbers and a max...\n    // Pick a random sum (< max) from the set of all available sums in arr\n    randomSumIn: (arr, max) => {\n      const sets = [[]];\n      const sums = [];\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0, len = sets.length; j < len; j++) {\n          const candidateSet = sets[j].concat(arr[i]);\n          const candidateSum = utils.sum(candidateSet);\n          if (candidateSum <= max) {\n            sets.push(candidateSet);\n            sums.push(candidateSum);\n          }\n        }\n      }\n      return sums[utils.random(0, sums.length - 1)];\n    },\n  };\n\n  const [stars, setStars] = useState(utils.random(1, 9));\n  const [availableNums, setAvailableNums] = useState(utils.range(1,9));\n  const [candidateNums, setCandidateNums] = useState([]);\n  const [secondsLeft, setSecondsLeft] = useState(1);\n\n  const handleAddTime = useCallback(() => {\n      props.updatesData(props.id, props.name, props.position, secondsLeft);\n  }, [props, secondsLeft]);\n\n  \n\n  useEffect(() => {\n    if (secondsLeft > 0 && availableNums.length > 0) {\n      const timerId = setTimeout(() => {\n        setSecondsLeft(secondsLeft + 1);\n      }, 1000)\n      return () => clearTimeout(timerId);\n    }\n  });\n\n  const candidateAreWrong = utils.sum(candidateNums) > stars;\n  const gameStatus = availableNums.length === 0 \n    ? 'won' \n    : secondsLeft === 20 ? 'lost' : 'active';\n\n    const changeGameVisibility = useCallback(() => {\n      props.updatesGameVisibility(gameStatus);\n    }, [props, gameStatus]);\n\n\n  const numberStatus = (number) => {\n    if(!availableNums.includes(number)) {\n      return 'used';\n    }\n    if (candidateNums.includes(number)) {\n      return candidateAreWrong ? 'wrong' : 'candidate';\n    }\n    return 'available';\n  };\n\n  const onNumberClick = (number, currentStatus) => {\n    if(gameStatus !== 'active' || currentStatus === 'used') {\n      return;\n    }\n    const newCandidateNums = \n      currentStatus === 'available' \n      ? candidateNums.concat(number)\n      : candidateNums.filter(cn => cn !== number);\n\n    if (utils.sum(newCandidateNums) !== stars) {\n      setCandidateNums(newCandidateNums);\n    } else {\n      const newAvailableNums = availableNums.filter(\n        n => !newCandidateNums.includes(n)\n      );\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidateNums([]);\n    }\n  }\n\n\n    return(\n      <div className=\"game centered\">\n          <div className=\"body\">\n            <div className=\"left\">\n              {gameStatus !== 'active' ? (\n                <Button variant=\"primary\" className=\"game-done \" onClick={() => {\n                  handleAddTime();\n                  changeGameVisibility();\n                }}>Finish</Button>\n              ) : (\n                utils.range(1, stars).map(starId => \n                <StarsDisplay key={starId}  />\n                )\n              )}\n            </div>\n            <div className=\"right\">\n              {utils.range(1, 9).map(number => \n                <PlayNumber \n                key={number}\n                status={numberStatus(number)}\n                colors={colors}\n                number={number}\n                onClick={onNumberClick}\n                />\n                )}\n            </div>\n          </div>\n          <div className=\"timer\">Time Remaining: {secondsLeft}</div>\n    </div>\n  )\n}\n\nexport default Game;\n","import Table from 'react-bootstrap/Table';\nimport { useState, useCallback } from 'react';\nimport Header from '../header/Header';\nimport UserForm from '../user-form/UserForm';\nimport ListOfUsers from '../list-of-users/ListOfUsers';\nimport Game from '../game/Game';\nimport './StarMatch.css';\n\nfunction StarMatch() {\n    const [gameId, setGameId] = useState(1);\n\n    function generateId() {\n        return `user=${Math.random().toString(36).substr(2,9)}`\n      }\n      const [isGameVisible, changeGameVisibility] = useState(false);\n      const [isFormVisible, changeFormVisibility] = useState(false);\n      const [isHeaderVisible, changeHeaderVisibility] = useState(true);\n      const [isTableVisible, changeTableVisibility] = useState(false);\n      const [list, changeList] = useState([]);\n    \n    \n      const handleStartGame = useCallback(() => {\n        changeFormVisibility(true);\n        changeHeaderVisibility(false);\n        changeTableVisibility(false);\n      }, []);\n    \n      const createNewUser = useCallback((name, position) => {\n        changeList((prevState) => {\n          const newState = prevState.concat([{ id: generateId(), name, position, secondsLeft: 0, } ]);\n          return newState;\n        })\n        changeFormVisibility(false);\n        changeGameVisibility(true);\n      }, []);\n\n    const addTime = useCallback((updatesId, updatesName, updatesPosition, updatesSecondsLeft) => {\n        console.log(updatesName, updatesPosition, updatesSecondsLeft);\n        changeList((prevState) => {\n            const newState = prevState.map((user) => {\n                      if (user.name === updatesName) {\n                        return {\n                          id: user.id,\n                          key: user.id,\n                          name: updatesName,\n                          position: updatesPosition,\n                          secondsLeft: updatesSecondsLeft,\n                        }\n                      } else {\n                        return {\n                          id: user.id,\n                          key: user.id,\n                          name: user.name,\n                          position: user.position,\n                          secondsLeft: updatesSecondsLeft,\n                        }\n                      }\n               });\n               return newState;\n            })\n        }, []);\n\n    const gameVisibility = useCallback(() => {\n            changeGameVisibility(false);\n            changeHeaderVisibility(true);\n            changeTableVisibility(true);\n    });\n\n    return( \n    <div>\n      {isHeaderVisible ? (<Header onClickStartGame={handleStartGame} />) : null}\n      {isFormVisible ? (<UserForm onSave={createNewUser}/>) : null }\n      {isGameVisible ? (<Game updatesData={addTime} updatesGameVisibility={gameVisibility} key={gameId} startNewGame={() => setGameId(gameId + 1)} />   ) : \n       null }\n      {isTableVisible ? (<section className=\"user-form\">\n         <Table striped bordered hover>\n          <thead>\n              <tr>\n              <th>Name</th>\n              <th>Position</th>\n              <th>Time</th>\n              </tr>\n          </thead>\n          <tbody>\n          {list.map((user) => {\n            return (\n                <ListOfUsers \n                 key={user.id} \n                 id={user.id}\n                 name={user.name} \n                 position={user.position} \n                 secondsLeft={user.secondsLeft}\n                />\n         \n               )\n          })}\n          </tbody>\n          </Table>\n       </section>) : null }\n    </div>\n    )}\n\nexport default StarMatch;\n","// import { useCallback, useState } from 'react';\nimport StarMatch from '../star-match/StarMatch';\nimport './App.css';\n\nexport default function App() {\n  \n  \n\n  return (\n    <div className=\"App\">\n      <StarMatch />\n      \n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './components/app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}